version: 2.1
##Add the orbs stanza below your version, invoking the orb:
orbs:

  slack: circleci/slack@4.3.0

commands:
  notify_slack_error:
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1

  notify_slack_pass:
    steps:
      - slack/notify:
          event: pass
          template: basic_success_1

  trigger_slack_notification:
   steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is a text notification*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always

jobs:
## slack notification job
  deploy:
    docker:
      - image: circleci/node:12.18.0
    resource_class: medium
    steps:
      - trigger_slack_notification
      - checkout
      - run:
          name: Install packages
          command: npm install
      - run:
          name: Installing Firebase-Tools
          command: npm install firebase-tools
      - run:
          name: Firebase Set Project Id
          command: ./node_modules/.bin/firebase use default --token $SLACK_ACCESS_TOKEN
      - run:
          name: Build App
          command: npm run build:app
      - run:
          name: Deploy All
          command: ./node_modules/.bin/firebase deploy --token $SLACK_ACCESS_TOKEN --only functions,hosting,storage --force
      - notify_slack_error
      - notify_slack_pass

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm i
             npm run build

      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image : circleci/node:13.8.0
    steps:
     - checkout
     - restore_cache:
          keys: [test-frontend]     
     - run:
        command : |
          cd frontend
          npm i
          npm run test

     - save_cache:
          paths: [test-frontend]
          key: backend-build
                
  test-backend:
    docker:
      - image : circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]     
      - run:
         command : |
           cd backend
           npm i
           npm run test

      - save_cache:
          paths: [test-backend]
          key: backend-build

  scan-frontend:
    docker:
      - image : circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]   
      - run:
         command : |
           cd frontend
           npm i
           npm audit fix --force
           npm audit fix --force


      - save_cache:
          paths: [scan-frontend]
          key: backend-build



  scan-backend:
    docker:
      - image : circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]  
      - run:
         command : |
           cd backend
           npm i
           npm audit fix --force
           npm audit fix --force


      - save_cache:
          paths: [scan-backend]
          key: backend-build




            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
         requires: [build-frontend]
      - test-backend:
         requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy

